@document.meta
title: spec
description: Specification for sdl
authors: [
    Daniel
]
categories: [
    spec
]
created: 2024-06-30T15:16:04+0530
updated: 2024-07-03T11:48:23+0530
version: 1.1.1
@end

* Daemon Architecture

  The Daemon will have two threads. The threads will be:

  - Download Thread
  - Command Thread

** Download Thread

** Command Thread

** Data

*** MovableList

    They are basically List with the a method to move a block inside the list.
    Can move a block up and down with the move method.

    @code python
    class MovableList (List):
        def move (start:int, end:int, offset:int) -> None:
            """
            start:int  -> start of the block that wants to be moved.
            end:int    -> end of the block that wants to be moved, inclusive.
            offset:int -> offset from the start, the block will be moved to that offset, with
                          start at that point.

            +---+---+---+---+---+--- offset
            0   1   2   3   4   5
            v   v   v   v   v   v
            +---+---+---+---+---+
            | 2 | 3 | 6 | 9 | 3 |
            +---+---+---+---+---+
              ^   ^   ^   ^   ^
              0   1   2   3   4
              +---+---+---+---+----- index

            move(0, 1, 4) will cause:

            +---+---+---+---+---+--- offset
            0   1   2   3   4   5
            v   v   v   v   v   v
            +---+---+---+---+---+
            | 6 | 9 | 2 | 3 | 3 |
            +---+---+---+---+---+
              ^   ^   ^   ^   ^
              0   1   2   3   4
              +---+---+---+---+----- index

            move(3, 3, 0) will cause:

            +---+---+---+---+---+--- offset
            0   1   2   3   4   5
            v   v   v   v   v   v
            +---+---+---+---+---+
            | 3 | 6 | 9 | 2 | 3 |
            +---+---+---+---+---+
              ^   ^   ^   ^   ^
              0   1   2   3   4
              +---+---+---+---+----- index

            if start, end, offset has any other values than above, will raise an IndexError

            """
            return
    @end


*** Query

    @code python
    class Query ():
        query = {
            "request_time":str = "unix time in seconds at the time of request of this url",
            "url":str = "the spotify url",
            "type":LinkType = "track, album, playlist",
        }
    @end

*** QueryList

    @code python
    class QueryList (List):
        """
        just a list of Query
        """
    @end

*** QueryQueue

    @code python
    class QueryQueue (MovableList):
        """
        just a Queue of Query, the query task will pop off from 0th index and
        fills the info
        """
    @end

*** Track

    @code python
    class Track ():

        track = {
            "file_name":str = "file of the song",
            "file_id":str = "the unique id of a file",
            "artist_name":str = "artist_name",
            "track_name":str = "track_name",
            "album_name":str = "album_name",
            "total_bytes":int = "size of the file in bytes",
            "duration":int = "the duration of the song in seconds",
            "downloaded_bytes":int = "size of the downloaded file in bytes",
            "discarded":bool = "whether the download of the track is discarded or not"
        }

    @end

*** TrackList

    @code python
    class TrackList (List):
        """
        Its just a list of Tracks
        """
    @end

*** Info

    @code python
    class Info ():

        info = {
            "url_type":LinkType = "type of url",
            "tracks":TrackList = "List of Tracks",
            "discarded":bool = "Whether the tracks of this info is discarded or not"
        }

    @end

*** InfoTree

    @code python
    class InfoTree (List):
        """
        just a list of Info
        """
    @end

*** DownloadQueue

    @code python
    class DownloadQueue (MovableList):
        """
        just a Queue of Track, the dowload task will pop off from 0th index and
        downloads the files
        """
    @end

* Client Architecture

  The client will have three threads (minimum of three if we are not doing any kind
  of fancy animations). The threads will be:

  - Input Thread
  - Request Thread
  - Status Thread

** Input Thread

   This thread will be the one to recive the user's input.

** Request Thread

   This will be the thread that requests the for the search queries

** Status Thread

   This thread recieves the status from the daemon and updates the data
   structures.

** Data

   The client will have the exact same data structures as the daemon, with
   some extra few. They are specified below.

*** User Input

    The user could give a url or an query string to download the tracks. If the
    user gives a url, some way, the url info is forwarded to the daemon, and
    the request thread fetches the info about the url and updates the InfoList.

    If the input is a query is string, the string is used to query for the urls.
    Then the gathered urls are presented to the user for the selection. Then the
    user selection will be forwarded to the daemon.

*** Link

    @code python
    class Link ():

        link = {
            "url":str = "the spotify url",
            "type":LinkType = "track, album, playlist",
            "title":str = "title string from the google search"
        }

    @end

*** LinkType

    @code python
    class LinkType (Enum):
        PLAYLIST = 1
        ALBUM    = 2
        TRACK    = 3
    @end

*** LinkList

    @code python
    class LinkList (List):
        """
        list of Link
        """
        pass
    @end

*** Response

    @code python
    class Response ():

        response = {
            "request_time":str = "unix time in seconds at the time of the request",
            "link_list":LinkList = "list of gathered links",
            "last_selected":int = "index of the last selected link"
        }
    @end

*** ResponseTree

    @code python
    class ResponseTree (List):
        """
        just a list of Response
        """
    @end
